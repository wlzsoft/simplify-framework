package vip.simplify.codegen;
import java.lang.reflect.Method;
import javax.servlet.http.HttpServletRequest;
import Message;
import UncheckedException;
import Bean;
import IModelSelector;
<%for(tag in tagList){%>
import ${tag.clazz};
<%}%>
<% 
 var date = date();
%>
/**
 * <p><b>Title:</b><i>动态方法选择器</i></p>
 * <p>Desc: 基于反射机制实现，性能校差,用于debug模式，方便开发阶段测试</p>
 * <p>source folder:{@docRoot}</p>
 * <p>Copyright:Copyright(c)2014</p>
 * <p>Company:meizu</p>
 * <p>Create Date:${date,dateFormat='yyyy年MM月dd日 HH:mm:ss'}</p>
 * <p>Modified By:luchuangye-</p>
 * <p>Modified Date:${date,dateFormat='yyyy年MM月dd日 HH:mm:ss'}</p>
 * @author <a href="mailto:luchuangye@meizu.com">luchuangye</a>
 * @version Version 0.1
 *
 */
@Bean
public class GenModelSelector implements IModelSelector{
	
	@SuppressWarnings("unchecked")
	@Override
	public <T> T setRequestModel(HttpServletRequest request, Class<T> modelClass)  {
		T model = null;
		String clazzName = modelClass.getName();
		switch(clazzName) {
			<%for(tag in tagList){%>
			case "${tag.clazz}" : {
				model = (T) new ${tag.clazz}();
				break;
			}
			<%}%>
			default : {
				try {
					model = modelClass.newInstance();
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
					throw new UncheckedException(e);
				}
			}
		}
		Method[] modelMethodArr = modelClass.getMethods();
		for (int i = 0; i < modelMethodArr.length; i++) {
			Method method = modelMethodArr[i];
			String methodName = method.getName();
			Object value = setModelPropertie(request, method, methodName);
			if(value == null||value.toString().trim().equals("")) {
				continue;
			}
			invokeSet(model,methodName,value);
		}
		return model;
	}
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void invokeSet(Object t, String columnName, Object val) {
		String clazzName = t.getClass().getSimpleName();
		try {
			switch(clazzName+":"+columnName) {
			    <%for(methodTag in methodTagList){%>
					<%if(methodTag.returnType == "void"){if(!methodTag.isStatic){if(!methodTag.isFinal){if(methodTag.fieldName!="params"){if(methodTag.fieldName!="cmd"){%>
				case "${methodTag.clazz}:${methodTag.value}":
					((${methodTag.clazz})t).${methodTag.value}(<%for(param in methodTag.params){%><%if(param.name == "java.time.LocalDate"){%>java.time.LocalDate.parse(val.toString())<%}else{%>(${param.name})val<%}}%>);
					break;
    		    <%}}}}}}%>
			}
		} catch (Exception e) {
			Message.error(e.getMessage());
		}
	}
}
