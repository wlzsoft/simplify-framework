<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>vip.simplify</groupId>
    <artifactId>simplify-framework</artifactId>
    <version>1.2.5-SNAPSHOT</version>
  </parent>
  <artifactId>simplify-base</artifactId>
  <packaging>pom</packaging>
  <name>(${project.artifactId})框架基础必须依赖配置</name>
  <description>框架基础必须依赖组件包</description>
  <properties>
  	 <templatePath>${project.parent.basedir}</templatePath>
  	 <parentsite></parentsite>
	 <docker.registry>172.16.85.146:8884</docker.registry>
	 <docker.host>http://172.16.180.39:6732</docker.host>
  </properties>
  <dependencies>
	  <dependency>
	  	<groupId>vip.simplify</groupId>
	    <artifactId>aop</artifactId>
	    <version>${project.parent.version}</version>
	  </dependency>
	  <dependency>
	  	<groupId>vip.simplify</groupId>
	    <artifactId>config</artifactId>
	    <version>${project.parent.version}</version>
	  </dependency>
	  <dependency>
	  	<groupId>vip.simplify</groupId>
	    <artifactId>encrypt</artifactId>
	    <version>${project.parent.version}</version>
	  </dependency>
	  <dependency>
	  	<groupId>vip.simplify</groupId>
	    <artifactId>ioc</artifactId>
	    <version>${project.parent.version}</version>
	  </dependency>
	  <dependency>
	  	<groupId>vip.simplify</groupId>
	    <artifactId>stress-tester</artifactId>
	    <version>${project.parent.version}</version>
	  </dependency>
	  <dependency>
	  	<groupId>vip.simplify</groupId>
	    <artifactId>template</artifactId>
	    <version>${project.parent.version}</version>
	  </dependency>
	  <dependency>
	  	<groupId>vip.simplify</groupId>
	    <artifactId>utils</artifactId>
	    <version>${project.parent.version}</version>
	  </dependency>
  </dependencies>
  <build>
  	<plugins>
  		<plugin>
			<groupId>com.spotify</groupId>
			<artifactId>docker-maven-plugin</artifactId>
			<version>0.4.13</version>
			<!-- <executions>
			    <execution>
			        <phase>package</phase>
			        <goals>
			            <goal>build</goal>
			        </goals>
			    </execution>
			</executions> -->
			<configuration>
				<!-- 本机不安装 docker,连接其他主机或虚拟机,需要增加下面两个配置  host 和 certpath 可以在 docker 环境变量中查到，　如果是 docker-machine 创建的虚拟机  同  env 连接的的时候 会显示 -->
				<dockerHost>${docker.host}</dockerHost>
				<!-- 默认可不设置，会自动使用最新版的，目前是v2的rest api，可以指定了v1等老的registry地址 -->
				<!-- <registryUrl>http://ip:6732/v2</registryUrl> -->
				<!--  
				curl ——cacert domain.crt  ——basic ——user admin:admin123 https://ip:6732/v2/_catalog{"repositories":["eclipse/webserver-jetty","apache/tomcat8.5"]} 
				-->
　　　　　　		<!-- <dockerCertPath>domain.crt</dockerCertPath> -->
				<!-- using remote dockers ~/.docker/config.json,这个文件如果没有，要创建，或是用docker login创建，但是没有docker命令是做不到的， 不建议使用这个选项，并且要在remote dokcer禁用，使用serverId标签来设置 -->
				<!-- <useConfigFile>true</useConfigFile> -->
				<serverId>nexus-docker-auth</serverId>
				<pushImage>true</pushImage>
				<!-- <pushImageTag>true</pushImageTag> -->
				<!-- https://github.com/ktoso/maven-git-commit-id-plugin 后续集成 -->
				<!-- <imageName>${docker.registry}/${project.groupId}/${project.artifactId}:${git.commit.id.abbrev}</imageName> -->
				<!-- 默认tag名latest,可以在imageName后面使用[:version]来指定默认tag的name，一般作为项目版本号 -->
				<!-- <imageName>${docker.registry}/${project.groupId}/${project.artifactId}</imageName> -->
				<imageName>${docker.registry}/${project.groupId}/${project.artifactId}:${project.version}</imageName>
				<!-- 第一步 docker:build-->
				<!-- 第一种方式，推荐 -->
				<dockerDirectory>${project.basedir}/</dockerDirectory>
				<!-- 第二种方式,集成度太深 -->
				<!-- <baseImage>172.16.85.146:8800/tomcat8.5</baseImage>
				<entryPoint>["catalina.sh", "run"]</entryPoint> -->
				<resources>
					<resource>
						<include>/target/${project.build.finalName}</include>
						<targetPath>/target</targetPath>
						<directory>${project.build.directory}</directory>
					</resource>
				</resources>
				<!-- 第二步 docker:build -DpushImageTag 这个命令包含第一步和第二步，相当于执行了docker build 再执行docker tags ,给即将要push的镜像打最后push的tag-->
				<!-- tags配置也可在命令行直接设置 mvn clean install docker:build -DpushImageTags -DdockerImageTag=latest -DdockerImageTag=another-tag -->
				<!-- <imageTags>
			       <imageTag>${project.version}</imageTag>
			       <imageTag>latest</imageTag>
			    </imageTags> -->
			</configuration>
		</plugin>
  	</plugins>
  </build>
</project>