<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.meizu.simplify</groupId>
  <artifactId>demo</artifactId>
  <packaging>war</packaging>
  <version>1.2.1-SNAPSHOT</version>
  <name>demo Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <properties>
  	 <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  	 <templatePath>${project.parent.basedir}</templatePath>
  	 <parentsite></parentsite>
  </properties>
  <repositories>
	  	<!-- 仓库地址，从上往下进行查找。 -->
	
		<!-- 如有私服,打开私服地址-->
		<!-- <repository>
			<id>nexus</id>
	  		<name>internal nexus repository</name>
	  		<url>http://10.2.67.20:8081/nexus/content/groups/public</url>
		</repository> -->
		
		<!-- <repository>
            <id>oschina</id>
            <name>Oschina Releases</name>
            <url>http://maven.oschina.net/content/groups/public</url>
        </repository>
        
		<repository> 
			<id>simpleify</id> 
			<name>simpleify beta</name>
			<url>https://raw.github.com/simpleify/repository/master</url>
		</repository> -->
		
	</repositories>
	
	<pluginRepositories> 
	
		<!-- 如有私服,打开私服地址-->
		<!-- <pluginRepository>
			<id>nexus</id>
	  		<name>internal nexus repository</name>
	  		<url>http://10.2.67.20:8081/nexus/content/groups/public</url>
		</pluginRepository> -->
		
		<!-- <pluginRepository>
            <id>oschina</id>
            <name>Oschina Releases</name>
            <url>http://maven.oschina.net/content/groups/public</url>
        </pluginRepository> -->
		
	</pluginRepositories> 
  <dependencies>
	<dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>mvc</artifactId>
		<version>${project.version}</version>
	</dependency>
	<dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>cache-redis</artifactId>
		<version>${project.version}</version>
	</dependency>
	<dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>webcache</artifactId>
		<version>${project.version}</version>
	</dependency>
	<dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>aop</artifactId>
		<version>${project.version}</version>
	</dependency>
	<dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>dao</artifactId>
		<version>${project.version}</version>
	</dependency>
	<dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>datasource</artifactId>
		<version>${project.version}</version>
	</dependency>
	<dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>log</artifactId>
		<version>${project.version}</version>
	</dependency>
	<dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>config-client</artifactId>
		<version>${project.version}</version>
	</dependency>
	<dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>rpc</artifactId>
		<version>${project.version}</version>
	</dependency>
	<dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>listener</artifactId>
		<version>${project.version}</version>
	</dependency>
	<!-- 非javaagent模式启用aop功能 -->
	<!-- <dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>weaving-plugins</artifactId>
		<version>${project.version}</version>
	</dependency> -->
	<dependency>
		<groupId>com.meizu.simplify</groupId>
		<artifactId>webserver</artifactId>
		<version>${project.version}</version>
	</dependency>
	<!-- 日志开始-由于dubbo必须依赖log4j模块，否则报错，如果使用dubbo的情况下，那么需引入 -->
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-log4j12</artifactId>
		<version>1.7.7</version>
	</dependency>
	<dependency>
		<groupId>log4j</groupId>
		<artifactId>log4j</artifactId>
		<version>1.2.17</version>
	</dependency>
	<!-- 日志结束-->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>javax.servlet-api</artifactId>
		<version>3.1.0</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.12</version>
		<scope>test</scope>
	</dependency>
</dependencies>
  <build>
    <finalName>demo</finalName>
    <plugins>
    	<plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-war-plugin</artifactId>
	        <version>2.6</version>
	        <configuration>
	        	<archive>
	        		<manifestFile>src/main/resources/META-INF/MAINIFEST.MF</manifestFile>
		            <manifest>
		              <addClasspath>true</addClasspath>
		            </manifest>
					<addMavenDescriptor>false</addMavenDescriptor>
				</archive>
				<!-- <packagingIncludes>WEB-INF/lib/*SNAPSHOT.jar</packagingIncludes> -->
				<!-- <warSourceIncludes>WEB-INF/lib/*SNAPSHOT.jar</warSourceIncludes> -->
				<!--
					装配过程中排除  不以.min.js -min.js结尾的js文件。
					因为在 yuicompressor配置了不会处理min这些文件所以这些文件要拷贝到对应的目
					录。开始弄的时候就是由于maven-war-plugin会把yuicompressor压缩后的文件覆盖掉，
					所以要做这样的处理，yuicompressor没有压缩的js文件就会拷贝过去，压缩过的js则不会拷贝
					yuicompressor会拷贝压缩后的文件过去
				-->
				<!-- <warName>${artifactId}</warName> -->
				<!-- 打包时候不需要的配置 -->
				<!-- <warSourceExcludes>
					%regex[^.+(?:(?&lt;!(?:-|\.)min)\.js)],
					%regex[^.+(?:(?&lt;!(?:-|\.)min)\.css)],
					**/*.js,**/*.css
				</warSourceExcludes> -->
				<!-- 将压缩未处理的所有文件都包含进来,包括未处的 js,css, 以及图片,未网页文件等都包含进来 -->
	             <!--  <warSourceIncludes>
	              **/*min.js,
	              images/**,
	              META-INF/**,
	              **/*.xml,
	              **/*.jsp,
	              **/*.gif,
	              **/*.jpg,
	              **/*.png
	              </warSourceIncludes> -->
	            <!-- 无法替换变量，默认为false,改为 <filtering>true</filtering>-->
				<!-- <webResources>
					<resource>
						<directory>src/main/resources/properties/${package.environment}</directory>
						<targetPath>WEB-INF/classes/properties</targetPath>
						<filtering>true</filtering>
					</resource>
				</webResources> -->
				<!-- <webXml>src/main/webapp/WEB-INF/web.xml</webXml> -->
			</configuration>
	    </plugin>
    	<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>3.5.1</version>
			<configuration>
				<source>1.8</source>
				<target>1.8</target>
			</configuration>
		</plugin>
    	<!-- 运行命令 mvn jetty:run 或    mvn -Djetty.port=9999 jetty:run -->
		<!-- jetty9 极其以上版本用  -Djetty.http.port=9999 jetty:run 来指定端口 -->
		<!--注意：jetty:run jetty:run-exploded的区别是：eclipse中run-exploded支持热部署-->
		<!-- jvmargs:PermGen空间被移除了，取而代之的是Metaspace（JEP 122）。JVM选项-XX:PermSize与-XX:MaxPermSize分别被-XX:MetaSpaceSize与-XX:MaxMetaspaceSize所代替。 -->
		<!-- -javaagent:E:/workspace-git/simplify-framework/weaving/target/weaving-1.2.1-SNAPSHOT.jar -Daop.properties=E:/workspace-git/simplify-framework/demo/src/main/resources/aop.properties -->
		<!-- -javaagent:E:/workspace-git/simplify-framework/weaving/target/weaving-1.2.1-SNAPSHOT.jar -Daop.properties的属性值可选-->
		<plugin>

		  <groupId>org.eclipse.jetty</groupId>
		  <artifactId>jetty-maven-plugin</artifactId>
		  <version>9.3.0.M2</version>
			<configuration>
				<!-- jvmArgs不起作用 -->
				<!-- <jvmArgs>-javaagent:E:/workspace-git/simplify-framework/weaving/target/weaving-1.2.1-SNAPSHOT.jar -Daop.properties=E:/workspace-git/simplify-framework/demo/src/main/resources/aop.properties</jvmArgs> -->
				<contextXml>src/test/java/jetty-config.xml</contextXml>
				<!--<war>${project.basedir}/${project.build.directory}/${project.artifactId}-${project.version}</war>-->
				<webAppSourceDirectory>${project.basedir}/src/main/webapp</webAppSourceDirectory>
				<webApp>
					<defaultsDescriptor>${project.basedir}/src/test/java/webdefault.xml</defaultsDescriptor>
                    <contextPath>/</contextPath>
					<!--<baseResource>${project.basedir}/src/main/webapp</baseResource>-->
                </webApp>
                <httpConnector>
                	<!-- 注意：这个端口的优先级最高，高于‘-Djetty.port’,如果这里指定了端口，那么‘-Djetty.port’指定的端口是无效的 -->
                	<!-- <port>8080</port> -->
                	<idleTimeout>60000</idleTimeout>
                    <!-- <maxIdleTime>120000</maxIdleTime>  -->
                </httpConnector>
				<stopKey>stop_jetty_dev</stopKey>
				<stopPort>9099</stopPort>
				<!-- <scanIntervalSeconds>3</scanIntervalSeconds> -->
				<!-- <scanTargetPatterns> 
                    <scanTargetPattern> 
                         <directory>src/main/webapp/WEB-INF</directory> 
                         <excludes> 
                              <exclude>**/*.jsp</exclude> 
                              <exclude>**/*.js</exclude> 
                              <exclude>**/*.css</exclude> 
                         </excludes> 
                         <includes> 
                              <include>**/*.properties</include> 
                              <include>**/*.xml</include> 
                         </includes> 
                    </scanTargetPattern> 
                    <scanTargetPattern> 
                         <directory>src/main/resources</directory> 
                         <includes> 
                              <include>**/*.properties</include> 
                              <include>**/*.xml</include> 
                         </includes> 
                    </scanTargetPattern> 
                    <scanTargetPattern> 
                         <directory>src/main/java</directory> 
                         <includes> 
                              <include>**/*.java</include> 
                              <include>**/*.xml</include> 
                         </includes> 
                    </scanTargetPattern> 
               </scanTargetPatterns> -->
				<!--<reload>manual</reload>-->
				<!--<reload>automatic</reload>-->
				<daemon>true</daemon>
				<requestLog implementation="org.eclipse.jetty.server.NCSARequestLog">
                       <filename>${project.build.directory}/access.log</filename>
                       <retainDays>90</retainDays>
                       <append>false</append>
                       <extended>false</extended>
                       <logTimeZone>GMT+8:00</logTimeZone>
                   </requestLog>
                   <!-- <systemProperties>
                   	<systemProperty>
                   		<name>productionMode</name>
                       	<value>${productionMode}</value>
                       </systemProperty>
                   </systemProperties> -->
			</configuration>
			<!--executions 在install时会起作用执行  -->
			<!-- 集成测试 -->
			<!-- 集成测试是对功能的测试，对于大部分web模块来说需要启动web容器，进行集成测试   -->
			<executions>
				<execution>
					<id>start-jetty</id>
					<!--集成测试前启动jetty-->
					<phase>pre-integration-test</phase>
					<goals>
						<goal>start</goal>
						<!--<goal>run</goal>-->
					</goals>
					<configuration>
						<httpConnector>
	                    	<port>8040</port>
	                    	<idleTimeout>60000</idleTimeout>
	                    </httpConnector>
	                    <!-- <stopKey>stop-jetty</stopKey>
						<stopPort>9098</stopPort> -->
						<scanIntervalSeconds>0</scanIntervalSeconds>
						<!--<daemon>true</daemon>-->
					</configuration>
				</execution>
				<execution>
					<id>stop-jetty</id>
					<!--集成测试结束停止jetty-->
					<phase>post-integration-test</phase>
					<goals>
						<goal>stop</goal>
					</goals>
				</execution>
			</executions>
		</plugin>
		<!-- 单元测试开始-集成javaangent-未测试 -->
	    <!-- mvn surefire:test或者mvn test 运行单元测试 -->
	    <plugin>
	      <groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-surefire-plugin</artifactId>
	      <version>2.19.1</version>
	      <configuration>
	        <!-- <skip>true</skip> -->
	        <forkMode>pertest</forkMode>
	        <argLine>-javaagent:${project.basedir}/target/weaving-1.2.1-SNAPSHOT.jar -Daop.properties=${project.basedir}/resources/aop.properties</argLine>
	        <workingDirectory>${project.basedir}/target</workingDirectory>
	      </configuration>
	      <!-- 测试代码进行单元测试和集成测试区分，一般有两种方式： 
  				 一是使用maven profile，通过profile区分 
   				二是根据生命周期，配置maven surefire 插件不同生命周期的includes或/exclueds属性 
   				方式二的配置如下：在src/test/java中把单元测试代码放在unit包，集成测试代码放在integration包 -->
   		   <executions>
               <execution>
                   <id>run-integration-test</id>
                   <phase>integration-test</phase>
                   <goals>
                       <goal>test</goal>
                   </goals>
                   <configuration>
                       <skip>false</skip>
                       <includes>
                           <include>**/integration/**/*.java</include>
                       </includes>
                   </configuration>
               </execution>
               <execution>
                   <id>run-test</id>
                   <phase>test</phase>
                   <goals>
                       <goal>test</goal>
                   </goals>
                   <configuration>
                       <skip>false</skip>
                       <includes>
                           <include>**/unit/**/*.java</include>
                       </includes>
                   </configuration>
               </execution>
           </executions>
	    </plugin>
	    <!-- <plugin>
	      <groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-dependency-plugin</artifactId>
	      <executions>
	        <execution>
	          <id>copy</id>
	          <phase>process-resources</phase>
	          <goals>
	            <goal>copy</goal>
	          </goals>
	          <configuration>
	            <artifactItems>
	              <artifactItem>
	                <groupId>com.meizu.simplify</groupId>
	                <artifactId>aop</artifactId>
	                <version>${project.version}</version>
	                <outputDirectory>${project.build.directory}</outputDirectory>
	              </artifactItem>
	            </artifactItems>
	          </configuration>
	        </execution>
	      </executions>
	    </plugin> -->
	    <!-- 单元测试结束 -->
	    <plugin>
	    	<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-antrun-plugin</artifactId>
			<version>1.8</version>
			<dependencies>
				<dependency>
					<groupId>jdk</groupId>
					<artifactId>tools</artifactId>
					<version>1.8</version>
					<scope>system</scope>
					<systemPath>${env.JAVA_HOME}/lib/tools.jar</systemPath>
				</dependency>
			</dependencies>
			<executions>
				<execution>
					<id>prepare-package</id>
					<phase>prepare-package</phase>
					<goals>
						<goal>run</goal>
					</goals>
					<configuration>
						<target>
							<property name="mvn-classpath" refid="maven.compile.classpath"/>  
							<java classpath="${mvn-classpath}" classname="com.meizu.simplify.codegen.resolver.MethodSelectorGenMain"  args="com.meizu.demo.mvc.controller" append="true" jvm="java"  newenvironment="true">
								<!-- <classpath refid="${mvn-classpath}" /> -->
								<!-- <bootclasspath  refid="${mvn-classpath}"  /> -->
							</java>
							<java classpath="${mvn-classpath}" classname="com.meizu.simplify.codegen.resolver.ModelSelectorGenBuild"  args="com.meizu.demo.mvc.model,com.meizu.demo.mvc.entity" append="true" jvm="java"  newenvironment="true">
							</java>
							<java classpath="${mvn-classpath}" classname="com.meizu.simplify.codegen.resolver.SqlByDaoEntityGenBuild"  args="com.meizu.demo.mvc.entity" append="true" jvm="java"  newenvironment="true">
							</java>
							<!-- <mkdir dir="${project.build.directory}/classes" /> -->
							<javac nowarn="false" destdir="${project.build.directory}/classes"  includeantruntime="true">
								<classpath path="${mvn-classpath}" />
								<!-- <src path="${project.build.sourceDirectory}" /> -->
								<src path="${project.build.directory}/codegen" />
								<include name="com/meizu/simplify/codegen/*.java" />
							</javac>
						</target>
					</configuration>
				</execution>
			</executions>
		</plugin>
		<!-- 代码混淆优化字节码操作工具ProGuard，是ProGuard官方很早以前推荐，现在官方不支持maven的插件，只支持基于maven的gradle
                       对项目中一个公共lib（有其特殊性）进行混淆，需有一个.pro的配置文件（存放在${basedir}/src/main/config/${project.artifactId}-maven.pro）-->
		<!-- <plugin>
				<groupId>com.idfconnect.devtools</groupId>
				<artifactId>idfc-proguard-maven-plugin</artifactId>
				<version>1.0.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>obfuscate</goal>
                        </goals>
                    </execution>
                </executions>
				<configuration>
					<inputFile>${project.build.outputDirectory}</inputFile>
		            <libraryJarPaths>
	                    	<libraryJarPath>${java.home}/lib/jce.jar</libraryJarPath>
	                </libraryJarPaths>
	                <excludeManifests>false</excludeManifests>
	                <excludeMavenDescriptor>false</excludeMavenDescriptor>
		             <outputArtifacts>
			             <outputArtifact>
				             <file>${project.build.finalName}.${project.packaging}</file>
			             </outputArtifact>
		             </outputArtifacts>
				</configuration>
                <dependencies>
                	<dependency>
                        <groupId>net.sf.proguard</groupId>
                        <artifactId>proguard-base</artifactId>
                        <version>4.11</version>
                    </dependency>
                </dependencies>
			</plugin>	 -->		
    </plugins>
  </build>
</project>
