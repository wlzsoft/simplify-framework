<assembly xmlns="http://maven.apache.org/ASSEMBLY/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd">
	<id>bin</id>
	<!-- maven-assembly-plugin插件有bug，不能使用<descriptorRef>bin</descriptorRef>有bug，无法正常打包，要改成其他名字，所以这个描述文件不能使用bin.xml命名 -->
    <!-- 打包的文件格式:tar.zip war zip -->
	<formats>
		<format>zip</format>
		<format>tar.gz</format>
	    <format>tar.bz2</format> 
	</formats>
	<!--  默认值是true，此时将创建一个名为artifactId-version的根文件夹，
			所有outputDirectory标签指定的路径将变为相对于该文件夹的路径。
			例如：outputDirectory的值为/test，则最终径为/artifactId-version/test
			如果includeBaseDirectory的值是false，则最终路径为/test  -->
<!-- <includeBaseDirectory>false</includeBaseDirectory> -->
	<includeBaseDirectory>true</includeBaseDirectory>
	<moduleSets>
	    <moduleSet>
	      <useAllReactorProjects>true</useAllReactorProjects>
	      <!-- <includeSubModules>true</includeSubModules> -->
	      <!-- <includes>
               <include>com.meizu.simplify:boot</include>
          </includes> -->
	      <sources>
	      	<includeModuleDirectory>false</includeModuleDirectory>
	        <!-- <outputDirectoryMapping>src/${module.basedir.name}</outputDirectoryMapping> -->
	        <fileSets>
	          <fileSet>
	          	<directory>src/main/scripts</directory>
	          	<!-- <outputDirectory>sources/${module.artifactId}</outputDirectory> -->
	            <includes>
	            	<include>**/*</include>
	              <!-- <include>src/**</include>
	              <include>pom.xml</include>
	              <include>LICENSE*</include>
	              <include>NOTICE*</include> -->
	            </includes>
	          </fileSet>
	        </fileSets>
	      </sources>
	      <!-- <binaries> -->
	        <!-- 复制项目jar包到dist目录 -->
	        <!-- <outputDirectory>dist</outputDirectory>
	        <includeDependencies>false</includeDependencies>
	        <unpack>false</unpack>
            <attachmentClassifier>my-assembly</attachmentClassifier>
	        <dependencySets>
	          <dependencySet> -->
	            <!-- 复制项目依赖jar包到 lib目录 -->
	            <!-- <outputDirectory>lib</outputDirectory>
	            <useTransitiveDependencies>true</useTransitiveDependencies>
	            <unpack>false</unpack>
	            <scope>compile</scope>
	            <useProjectArtifact>false</useProjectArtifact>
	            <excludes>
	              <exclude>com.meizu.simplify:*</exclude>
	            </excludes> -->
	          <!-- </dependencySet>
	        </dependencySets>
	      </binaries> --> 
	    </moduleSet>
	    <!-- <moduleSet>
            <includes>
                <include>com.meizu.simplify:*</include>
            </includes>
            <binaries />
        </moduleSet> -->
	</moduleSets>

	<fileSets>
	    <fileSet>
	    	<!-- <outputDirectory></outputDirectory>
      		<filtered>false</filtered> -->
	      <includes>
	        <include>README.txt</include>
	        <include>LICENSE.*.txt</include>
			<include>NOTICE*</include>
	      </includes>
	      <!-- <useDefaultExcludes>true</useDefaultExcludes> -->
	    </fileSet>
	    <!-- 创建日志目录，用于存放程序的日志输出文件 -->
	    <fileSet>
	    	<outputDirectory>/log</outputDirectory>
	    	<excludes>
				<exclude>**/*</exclude>
		    </excludes>
	    </fileSet>
	    <!-- 输出启动脚步 -->
	    <fileSet>
			<directory>src/main/scripts</directory>
			<outputDirectory>/bin</outputDirectory>
			<includes>
				<include>**/*</include>
			</includes>
		</fileSet>
		<!-- 输出配置文件 -->
	    <fileSet>
	       <!-- <useDefaultExcludes>false</useDefaultExcludes> -->
	      <!-- 打包路径 -->
	      <!-- <directory>src/main/bin</directory> -->
	      <!-- <directory>${project.basedir}/target/classes</directory> -->
	      <directory>src/main/resources</directory>
	      <!-- 打包后输出路径 -->
	      <!-- <outputDirectory>/bin</outputDirectory> -->
	      <outputDirectory>/conf</outputDirectory>
	      <!-- 过滤 不包含的文件-->
	      <!-- 由于开启useProjectArtifact选项，所以不需要拷贝class文件，只需拷贝配置和脚本文件 -->
	      <excludes>
	      	 <!-- <exclude>**/com/**</exclude> -->
	      	 <exclude>**/META-INF/**</exclude>
	      </excludes>
	    </fileSet>        
	     <!-- 输出项目文档 -->
	    <fileSet>
	      <directory>target/docs</directory>
	      <!-- <directory>target/site</directory> -->
	      <outputDirectory>/docs</outputDirectory>
	      <!-- <outputDirectory>docs</outputDirectory> -->
	      <!-- <includes>
	        <include>apidocs*/**</include>
	        <include>xref*/**</include>
	      </includes> -->
	    </fileSet>
	    <!-- 输出javadoc -->
	    <fileSet>
	      <directory>target/api</directory>
	      <outputDirectory>/javadocs</outputDirectory>
	      <includes>
	        <include>**/*</include>
	      </includes>
	    </fileSet>
   	</fileSets>
  
  	<dependencySets>
		<dependencySet>
			<!-- 当前项目传递依赖jar(其他jar的依赖jar)是否否包含在这个依赖集合里 -->
	        <useTransitiveDependencies>true</useTransitiveDependencies>
<!--        <unpack>false</unpack> -->
			<!-- 包当前项目打成jar：这样可以在maven-jar-plugin插件中配置这个jar包的META-INF目录，设置jar可运行的，并且包含classpath等等 -->
			<useProjectArtifact>true</useProjectArtifact>
			<outputDirectory>lib</outputDirectory><!-- 将scope为runtime的依赖包打包到lib目录下。 -->
			<scope>runtime</scope>
           <!--  <excludes>
              <exclude>ros-report*.jar</exclude>
              <exclude>com.meizu.simplify:*</exclude>
            </excludes> -->
          </dependencySet>
	       <!-- 包含provided类型的包，如果是tomcat等容器，是需要这些依赖的，容器自带  -->
			<!-- <dependencySet>
				<useProjectArtifact>false</useProjectArtifact>
				<outputDirectory>provided</outputDirectory>
				<scope>provided</scope>
			</dependencySet> -->
	</dependencySets>
</assembly>
