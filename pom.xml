<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.meizu.simplify</groupId>
  <artifactId>simplify-framework</artifactId>
  <version>1.2.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>精简程序框架</name>
  <description>精简的程序框架，可以用于简化web和服务端程序的开发</description>
  <url>http://simplify.ros.meizu.com</url>
  <!-- 项目工程管理 start -->
	<inceptionYear>2016</inceptionYear>
  	<organization>
		<name>meizu inc.</name>
		<url>http://www.meizu.com/</url>
	</organization>
	<!-- 问题跟踪 -->
	<issueManagement>
		<system>Jira</system>
		<url>http://10.2.67.31:8083/jira/browse/ros</url>
	</issueManagement>
  	<!-- 版本控制 -->
	<scm>
		<url>http://10.2.67.47/ros-team/simplify-framework</url>
		<connection>scm:git:http://10.2.67.47/ros-team/simplify-framework</connection>
		<developerConnection>scm:git:http://10.2.67.47/ros-team/simplify-framework</developerConnection>
	</scm>
	<!-- 持续集成 -->
	<ciManagement>
		<system>Jenkins</system>
		<url>http://10.2.67.40:8082/</url>
	</ciManagement>
  	<mailingLists>
    	<mailingList>
      		<name>开发人员列表</name>
	  		<subscribe>mailto:users-subscribe@meizu.com</subscribe>
    	</mailingList>
  	</mailingLists>
  <!-- 开发成员列表 -->
  <developers>
		<developer>
			<id>lcy</id>
			<name>lcy</name>
			<email>luchuangye@meizu.com</email>
			<timezone>8</timezone>
		</developer>
		<developer>
			<id>wlz</id>
			<name>wlz</name>
			<email>wanglizong@meizu.com</email>
			<timezone>8</timezone>
		</developer>
	</developers>
	<!-- 项目授权 -->
	<licenses>
		<license>
			<name>Apache License,Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
		</license>
	</licenses>
	<!-- 项目工程管理  end-->
  <modules>
    <module>stress-tester</module>
  	<module>utils</module>
  	<module>entity</module>
  	<module>weaving</module>
  	<module>encrypt</module>
  	<module>ioc</module>
  	<module>aop</module>
  	<module>dao</module>
  	<module>caches</module>
  	<module>webcache</module>
  	<module>mvc</module>
  	<module>template</module>
  	<module>config</module>
  	<module>cache-redis</module>
  	<module>mongodb</module>
    <module>message</module>
    <module>rpc</module>
    <module>listener</module>
    <module>authfilter</module>
    <module>template-plugins</module>
    <module>view-plugins</module>
    <module>test</module>
    <module>simplify-server</module>
    <module>simplify-base</module>
    <module>simplify-client</module>
    <module>config-plugins</module>
    <module>datasource</module>
    <module>log</module>
    <module>zookeeper</module>
  </modules>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <argLine>-Dfile.encoding=UTF-8</argLine>
    <templatePath>${basedir}</templatePath>
    <parentsite>parent</parentsite>
    <simplify.version>${project.version}</simplify.version>
    <mongo-java-driver>3.1.0</mongo-java-driver>
    <slf4j-api.version>1.7.7</slf4j-api.version>
  </properties>
  <distributionManagement>
		<snapshotRepository>
            <id>nexus-snapshots</id>
            <name>User Porject Snapshot</name>
            <url>http://10.2.67.20:8081/nexus/content/repositories/snapshots/</url>
            <uniqueVersion>true</uniqueVersion>
        </snapshotRepository>
        <repository>
            <id>nexus-releases</id>
            <name>User Porject Release</name>
            <url>http://10.2.67.20:8081/nexus/content/repositories/releases/</url>
            <!-- <url>scp://root@10.2.67.21/nexus/content/repositories/releases/</url> -->
        </repository>
		<site>
			<id>simplify-doc</id>
			<name>simplify-doc</name>
			<!-- <url>file://D:/site</url> -->
			<url>scp://root@10.2.67.21/home/simplify-doc</url>
		</site>
	</distributionManagement>
	<repositories>
	  	<!-- 仓库地址，从上往下进行查找。 -->
	
		<!-- 如有私服,打开私服地址-->
		<!-- always(实时更新) daily（每天更新） interval:xxx（隔xxx分钟更新一次）  never（从不更新） 默认为daily -->
		<!-- <repository>
			<id>nexus</id>
	  		<name>internal nexus repository</name>
	  		<url>http://10.2.67.20:8081/nexus/content/groups/public</url>
	  		<snapshots>
	  			<enabled>true</enabled>
	  			<checksumPolicy>warn</checksumPolicy>
	  			<updatePolicy>always</updatePolicy>
	  		</snapshots>
		</repository> -->
		
		<!-- <repository>
            <id>oschina</id>
            <name>Oschina Releases</name>
            <url>http://maven.oschina.net/content/groups/public</url>
        </repository> -->
        
		<!-- <repository> 
			<id>simpleify</id> 
			<name>simpleify beta</name>
			<url>https://raw.github.com/simpleify/repository/master</url>
		</repository> -->
		
	</repositories>
	
	<pluginRepositories> 
	
		<!-- 如有私服,打开私服地址-->
		<!-- <pluginRepository>
			<id>nexus</id>
	  		<name>internal nexus repository</name>
	  		<url>http://10.2.67.20:8081/nexus/content/groups/public</url>
		</pluginRepository> -->
		
		<!-- <pluginRepository>
            <id>oschina</id>
            <name>Oschina Releases</name>
            <url>http://maven.oschina.net/content/groups/public</url>
        </pluginRepository> -->
		
	</pluginRepositories> 
	
  <dependencies>
		<!-- 日志相关 begin -->
		<!-- slf4j启用彩色日志jansi -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.7</version>
		</dependency>
		<!-- logback日志start -->
		<dependency> 
		    <groupId>ch.qos.logback</groupId> 
		    <artifactId>logback-classic</artifactId> 
		    <version>1.1.3</version> 
		    <scope>provided</scope>
		</dependency> 
		<!-- logback日志end -->
		
		
		<!-- 日志相关 end -->
	    <!-- 测试相关start -->
	    <!-- 单元测试 -->
  		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		
		<!-- 测试相关end -->
		<!-- <dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-jaxrs</artifactId>
			<version>1.5.8</version>
		</dependency> -->
  </dependencies>
  <build>
    <!-- <defaultGoal>pdf:pdf</defaultGoal> -->
    <extensions>
      <!-- Enabling the use of SSH -->
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
         <artifactId>wagon-ssh-external</artifactId>
         <version>2.10</version>
      </extension>
    </extensions>
    <plugins>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>3.5.1</version>
			<configuration>
				<source>1.8</source>
				<target>1.8</target>
			</configuration>
		</plugin>
		<!-- mvn source:jar -->
		<!-- 使用持续构建工具，在linux平台下打包，可以解决这个问题，前提是linux系统的内部编码要设置成utf-8，目前打包虽然不乱码，但是打包后的整个jar文件是gbk的，eclipse等工具会解析整个文件为gbk编码，其实jar包内部存的是utf8编码的文件 -->
		<plugin>
			<artifactId>maven-source-plugin</artifactId>
			<version>2.4</version>
			<configuration>
				<attach>true</attach>
				<!-- <encoding>utf-8</encoding> --><!-- 未测试 -->
				<argLine>-Dfile.encoding=UTF-8</argLine> <!-- 注意设置，否则生成的jar会是默认编码，也就是gbk，那么eclipse等ide识别就出现乱码,debug调试时就很麻烦了 --> 
			</configuration>
			<executions>
				<execution>
					<!-- 编译阶段打包源文件 -->
					<id>attach-sources</id>
					<!-- <phase>package</phase> -->
					<!-- <phase>verify</phase> -->
					<phase>compile</phase>
					<goals>
						<goal>jar</goal>
						<!-- <goal>jar-no-fork</goal> -->
					</goals>
				</execution>
			</executions>
		</plugin>
		<!-- 版本管理插件 -->
		<plugin>  
		  <groupId>org.apache.maven.plugins</groupId>  
		  <artifactId>maven-release-plugin</artifactId>  
		  <version>2.5.3</version>
		  <!-- This version is necessary for use with git version 1.8.5 -->
		  <!-- <dependencies>
            <dependency>
               <groupId>org.apache.maven.scm</groupId>
               <artifactId>maven-scm-provider-gitexe</artifactId>
               <version>1.8.1</version>
            </dependency>
         </dependencies> -->
		  <!-- <username>lcy</username>
    	  <password>lcy</password> --> 
		  <configuration>  
		  	<!-- <mavenHome>D:\apache-maven-3.3.9</mavenHome> -->
		  	<arguments>-Dmaven.test.skip=true</arguments>
		  	<useReleaseProfile>false</useReleaseProfile>
		  	<checkModificationExcludes>
		  		<checkModificationExclude>target</checkModificationExclude>
		  		<checkModificationExclude>.settings</checkModificationExclude>
		  		<checkModificationExclude>.project</checkModificationExclude>
		  		<checkModificationExclude>.classpath</checkModificationExclude>
		  		<checkModificationExclude>.svn</checkModificationExclude>
		  		<checkModificationExclude>*\target</checkModificationExclude>
		  		<checkModificationExclude>*\.settings</checkModificationExclude>
		  		<checkModificationExclude>*\.project</checkModificationExclude>
		  		<checkModificationExclude>*\.classpath</checkModificationExclude>
		  	</checkModificationExcludes>
		    <tagBase>http://10.2.67.47/ros-team/simplify-framework</tagBase>
		    <!-- <tagNameFormat>v@{project.version}</tagNameFormat> -->
		    <!-- <releaseProfiles>release</releaseProfiles> -->
		  </configuration>  
		</plugin>  
		<!-- 解决maven test命令时console出现中文乱码乱码 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<!-- forkMode 可设置值有 “never”， “once”， “always” 和 “pertest” -->
					<!-- pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归
						 once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
						 always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能，其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5 -->
					<runOrder>alphabetical</runOrder><!-- 方法排序,按字母排序,无效 -->
					<forkMode>once</forkMode>
					<parallel>methods</parallel>
					<threadCount>4</threadCount>
					<!-- <argLine>-Xmx1024m -Xss8192k[线程栈大小，另外的说话，是线程创建占用的内存空间,8192k和linux线程栈大小一致] -XX:MetaSpaceSize=256m -XX:MaxMetaspaceSize=256m</argLine> -->
 					<argLine>-Dfile.encoding=UTF-8</argLine> 
 					<excludes>  
	                  <exclude>**/TestAll.java</exclude>  
	                </excludes> 
 					<!-- cobertura统计单元测试覆盖率 -->
					<!-- <systemProperties>
						<property>
							<name>net.sourceforge.cobertura.datafile</name>
							<value>target/cobertura/cobertura.ser</value>
						</property>
					</systemProperties> -->
				</configuration>
			</plugin>
			<plugin>
			  <groupId>org.apache.maven.plugins</groupId>
			  <artifactId>maven-pdf-plugin</artifactId>
	          <version>1.3</version>
			  <executions>
			    <execution>
			      <id>pdf</id>
			      <phase>site</phase>
			      <goals>
			        <goal>pdf</goal>
			      </goals>
			      <configuration>
			      	<aggregate>true</aggregate>
			      	<locales>zh_CN</locales>
			        <!-- <outputDirectory>${project.reporting.outputDirectory}</outputDirectory> -->
			        <includeReports>true</includeReports>
			      </configuration>
			    </execution>
			  </executions>
			</plugin>
			<!-- 设置以下环境变量 -->
		   <!-- JAVA_TOOL_OPTIONS   
		   -Dfile.encoding=UTF-8 -->
		   <plugin>                             
		   		<groupId>org.apache.maven.plugins</groupId>                            
		   		<artifactId>maven-javadoc-plugin</artifactId>                            
		   		<version>2.10.3</version>  
		   		<configuration>  
		   			<!-- <failOnError>false</failOnError> -->     
		   		    <additionalJOption>-J-Dfile.encoding=UTF-8</additionalJOption>
		   		    <additionalparam>-Xdoclint:none</additionalparam><!-- java1.8 特有功能 -->
		   		    <!-- aggregate 开启多模块项目javadoc支持 -->
		   			<aggregate>true</aggregate>                          
		   			<!-- <stylesheetfile>${templatePath}/src/site/stylesheet.css</stylesheetfile>   -->                        
		   			<charset>UTF-8</charset>           
		   			<encoding>UTF-8</encoding>                                        
		   			<docencoding>UTF-8</docencoding>    
		   			<tags>  
			            <tag>  
			            	<!-- 注释中自定义注解名称 -->
			                <name>title</name>  
			                <!-- placement有8种(方法、字段、类）等等，用于把上面的注解放到JavaDoc中 -->
			                <placement>title</placement>  
			                <!-- head不写，使用的name属性的值，并保持默认格式，如果写了，可以有更好的展现效果 -->
			                <head>标题</head>  
			            </tag>  
			        </tags>
			        <!-- <reportOutputDirectory>../reportDir</reportOutputDirectory>  
    							<destDir>apidoc</destDir>-->                    
		   		</configuration>        
		   		<!-- <executions>
			     <execution>
			      <id>attach-javadocs</id>
			      <goals>
			       <goal>jar</goal>
			      </goals>
			     </execution>
			    </executions>   -->      
		   	</plugin>
			<!-- site插件：site:stage 用于生成所有模块的site，site:run 用于生成和运行site，用于查看文档 ,后续增加site插件的详细配置-->
			<!--文档创建： archetype:create -DgroupId=com.meizu.ros -DartifactId=ros-app -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-site -->
			<!-- maven的site文档生成，使用的是Doxia来处理和解析文档的 -->
			<!-- clean site site:stage -DstagingDirectory=file://D:/site #可以指定生成的路径 -->
			<!-- 生成过慢的解决方法  clean site site:stage -Ddependency.locations.enabled=false-->
			<plugin>  
                <!-- 站点生成插件 -->  
                <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-site-plugin</artifactId>
                <version>3.5</version>
                <dependencies>
                	<dependency><!-- add support for ssh/scp -->              
                		<groupId>org.apache.maven.wagon</groupId>              
                		<artifactId>wagon-ssh</artifactId>              
                		<version>2.10</version>            
                	</dependency>          
                </dependencies>  
                <configuration>  
                    <!-- 支持国际化 -->  
                    <locales>zh_CN</locales>
                    <templateFile>${templatePath}/src/site/${parentsite}/site.vm</templateFile>
                    <siteDirectory>${templatePath}/src/site/${parentsite}</siteDirectory>
                    <reportPlugins>
						<plugin>
							<!-- 源码查看生成 -->
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-jxr-plugin</artifactId>
							<version>2.5</version>
							<configuration>
								<!-- 多模块聚合 -->
								<aggregate>true</aggregate>
							</configuration>
					        <reportSets>
					          <reportSet>
					            <id>aggregate</id>
					            <!-- <inherited>false</inherited> -->
					            <reports>
					              <report>aggregate</report>
					            </reports>
					          </reportSet>
					        </reportSets>
					      </plugin>
					      <!-- 项目信息过滤-index一定要生成,否则链接问题 -->
						   <plugin>          
							    <groupId>org.apache.maven.plugins</groupId>
								<artifactId>maven-project-info-reports-plugin</artifactId>
								<version>2.9</version>   
								<configuration>
									<aggregate>true</aggregate>
									<customBundle>${templatePath}/src/site/custom/project-info-reports.properties</customBundle>
								</configuration>    
							    <reportSets>           
								   <reportSet>          
									   <reports>   
											<report>index</report>
											<report>dependencies</report>
											<report>dependency-convergence</report>
											<report>dependency-info</report>
											<report>dependency-management</report>
											<report>distribution-management</report>
											<report>project-team</report>
											<report>issue-tracking</report>
											<report>license</report>
											<report>scm</report>
										    <report>mailing-list</report>               
											<report>cim</report>
											<report>modules</report>
											<report>plugin-management</report>
											<report>plugins</report>
											<report>help</report>
											<report>summary</report>         
									   </reports>           
								   </reportSet>         
							   </reportSets>
						   </plugin>
						   <!-- 设置以下环境变量 -->
						   <!-- JAVA_TOOL_OPTIONS   
						   -Dfile.encoding=UTF-8 -->
						   <plugin>                             
						   		<groupId>org.apache.maven.plugins</groupId>                            
						   		<artifactId>maven-javadoc-plugin</artifactId>                            
						   		<version>2.10.3</version>  
						   		<configuration>  
						   			<!-- <failOnError>false</failOnError> -->     
						   		    <additionalJOption>-J-Dfile.encoding=UTF-8</additionalJOption>
						   		    <additionalparam>-Xdoclint:none</additionalparam><!-- java1.8 特有功能 -->
						   		    <!-- aggregate 开启多模块项目javadoc支持 -->
						   			<aggregate>true</aggregate>                          
						   			<!-- <stylesheetfile>${templatePath}/src/site/stylesheet.css</stylesheetfile>   -->                        
						   			<charset>UTF-8</charset>           
						   			<encoding>UTF-8</encoding>                                        
						   			<docencoding>UTF-8</docencoding>    
						   			<tags>  
							            <tag>  
							            	<!-- 注释中自定义注解名称 -->
							                <name>title</name>  
							                <!-- placement有8种(方法、字段、类）等等，用于把上面的注解放到JavaDoc中 -->
							                <placement>title</placement>  
							                <!-- head不写，使用的name属性的值，并保持默认格式，如果写了，可以有更好的展现效果 -->
							                <head>标题</head>  
							            </tag>  
							        </tags>
							        <!-- <reportOutputDirectory>../reportDir</reportOutputDirectory>  
        							<destDir>apidoc</destDir>-->                    
						   		</configuration>        
						   		<!-- <executions>
							     <execution>
							      <id>attach-javadocs</id>
							      <goals>
							       <goal>jar</goal>
							      </goals>
							     </execution>
							    </executions>   -->      
						   	</plugin>
					</reportPlugins>
                </configuration>
            </plugin>
    </plugins>
    <resources>
		<resource>
			<directory>src/main/resources</directory>
			<includes>
				<include>**/*.xml</include>
				<include>**/*.properties</include>
				<include>**/*.template</include>
			</includes>
			<filtering>true</filtering>
		</resource>
		<resource>
			<directory>src/main/java</directory>
			<includes>
				<include>**/*.xml</include>
				<include>**/*.properties</include>
			</includes>
			<filtering>true</filtering>
		</resource>
	</resources>
	<!-- <testResources>
		<testResource>
			<directory>src/test/java</directory>
			<includes>
				<include>**/*</include>
			</includes>
			<filtering>true</filtering>
		</testResource>
	</testResources> -->
    
  </build>
  
	<!-- <reporting>      
		<plugins> -->
           <!-- <plugin> 
               <groupId>org.codehaus.mojo</groupId>                                      
               <artifactId>dashboard-maven-plugin</artifactId>                                      
               <version>1.0.0-beta-1</version>                             
           </plugin> -->
	   <!-- </plugins>    
   </reporting> -->
</project>