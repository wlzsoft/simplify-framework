<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>vip.simplify</groupId>
  <artifactId>simplify-framework</artifactId>
  <version>1.2.5-releases</version>
  <packaging>pom</packaging>
  <name>精简程序框架</name>
  <description>精简的程序框架，可以用于简化web和服务端程序的开发</description>
  <url>http://simplify.xxx</url>

	<!-- 持续集成 -->
 	<ciManagement>
		<system>Jenkins</system>
		<url>http://172.16.180.88:8082/</url>
	</ciManagement>


	<!-- 项目工程管理  end-->
	<!-- 1.指定构建模块需要使用 命令：  -pl vip.simplify:archetype clean install deploy -pl archetype clean install deploy 或是 ——projects archetype clean install deploy -->
	<!-- 2. -am 选项可以同时构建所列模块的依赖模块,命令:执行 clean install -pl utils -am 后会得到如下模块：父级的simplify-framework模块和引用的stress-tester模块
         3. -amd 选项可以同时构建依赖于所列模块的模块，命令：clean install -pl rpc -amd 后会得到如下模块：rpc,rpc-core,rpc-client,rpc-server,simplify-server,simplify-client,config-api,config-client
         4. -rf 选项可以在完整的反应堆构建顺序基础上，指定从哪个模块开始构建，命令：clean install -rf rpc-client ，由于rpc-client位于第三，它之后有rpc-server，因此会得到如下输出模块：rpc-client,rpc-server
         5.在-pl -am或者-pl -amd的基础上，还能应用-rf参数，以对裁剪后的反应堆再次裁剪,命令：  clean install -pl rpc -amd -rf rpc-client
                        其中，-pl 和 -amd参数会得到：rpc,rpc-core,rpc-client,rpc-server,simplify-server,simplify-client,config-api,config-client模块，在此基础上 -rf参数制定从rpc-client开始构建，于是会得到：rpc-client,rpc-server -->
  <modules>
	  <module>stress-tester</module>
	  <module>utils</module>
	  <module>entity</module>
	  <module>weaving</module>
	  <module>encrypt</module>
	  <module>ioc</module>
	  <module>aop</module>
	  <module>dao</module>
	  <module>caches</module>
	  <module>webcache</module>
	  <module>mvc</module>
	  <module>template</module>
	  <module>config</module>
	  <module>cache-redis</module>
	  <module>message</module>
	  <module>rpc</module>
	  <module>listener</module>
	  <module>authfilter</module>
	  <module>template-plugins</module>
	  <module>view-plugins</module>
	  <module>test</module>
	  <module>simplify-server</module>
	  <module>simplify-base</module>
	  <module>simplify-client</module>
	  <module>config-plugins</module>
	  <module>datasource</module>
	  <module>log</module>
	  <module>dto</module>
	  <module>zookeeper</module>
	  <module>boot</module>
<!-- 	  <module>assembly-descriptor</module> -->
	  <module>webserver</module>
	  <module>webserver-plugins</module>
	  <module>plugin-loader</module>
	  <module>weaving-plugins</module>
	  <module>ioc-plugins</module>
	  <module>net</module>
	  <!--<module>archetype</module>-->
	  <!--<module>mongodb</module>-->
    <!-- <module>mq-plugins</module> -->
    
  </modules>
  <properties>
  	<!-- Plugin的属性start -->
	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <argLine>-Dfile.encoding=UTF-8</argLine>
    <!-- Plugin的属性end -->
    <!-- 自定site相关变量start -->
    <templatePath>${basedir}</templatePath>
    <parentsite>parent</parentsite>
	<parentsiteDir>${parentsite}</parentsiteDir>
	<siteDirPath>${templatePath}</siteDirPath>
    <!-- 自定site相关变量end -->
    <java.version>1.8</java.version>
    <maven.version>3.5.2</maven.version>
    <!-- 依赖库版本号定义start -->
    <simplify.version>${project.version}</simplify.version>
    <mongo-java-driver>3.1.0</mongo-java-driver>
    <slf4j-api.version>1.7.7</slf4j-api.version>
    <!-- 依赖库版本号定义end -->
  </properties>
  <distributionManagement>
        <repository>
            <id>nexus-releases</id>
            <name>maven-releases</name>
            <url>http://172.16.180.88:8081/nexus/content/repositories/releases/</url>
        </repository>
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <name>maven-snapshots</name>
            <url>http://172.16.180.88:8081/nexus/content/repositories/snapshots/</url>
            <uniqueVersion>true</uniqueVersion>
        </snapshotRepository>
	</distributionManagement>
  <dependencies>
		<!-- 日志相关 begin -->
	    <!--启用彩色日志可以使用jansi库，如果是实现是logback，那么自带彩色功能,当然使用logback也可以通过withJansi开开启集成jansi，但是需要独立引用这个库,如果是非window机器不需要引入，因为已经自带ansi颜色符号识别
         如果是在idea或是eclipse，由于工具支持了ansi颜色字符识别，所以也可以看到颜色，但如果在window控制台就不行了-->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.7</version>
		</dependency>
		<!-- logback日志start -->
		<dependency> 
		    <groupId>ch.qos.logback</groupId> 
		    <artifactId>logback-classic</artifactId> 
		    <version>1.1.3</version> 
		    <scope>provided</scope>
		</dependency> 
		<!-- logback日志end -->
	    <!-- 测试相关start -->
	    <!-- 单元测试 -->
  		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		
		<!-- 测试相关end -->
  </dependencies>
   <build>
	   <resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
					<include>**/*.template</include>
				</includes>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>
  		<plugins>
  		   <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19</version>
                <configuration>
                    <skip>true</skip>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.8</version>
                <executions>
                    <execution>
                        <id>install</id>
                        <phase>install</phase>
                        <goals>
                            <goal>sources</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
  		    <!--引入JDK 版本插件 -->
  		   <plugin>
 				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>utf-8</encoding>
				</configuration> 		   
  		   </plugin>
  		</plugins>
  </build>
</project>