<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.meizu.simplify</groupId>
    <artifactId>config-plugins</artifactId>
    <version>1.2.2-SNAPSHOT</version>
  </parent>
  <artifactId>config-server</artifactId>
  <name>配置服务的服务后端</name>
  <properties>
  	 <templatePath>${project.parent.parent.basedir}</templatePath>
  	 <parentsite></parentsite>
  </properties>
   <dependencies>
	  <dependency>
	  	<groupId>com.meizu.simplify</groupId>
	    <artifactId>config</artifactId>
	    <version>${project.parent.version}</version>
	  </dependency>
	  <dependency>
	  	<groupId>com.meizu.simplify</groupId>
	    <artifactId>config-api</artifactId>
	    <version>${project.parent.version}</version>
	  </dependency>
	  <dependency>
	  	<groupId>com.meizu.simplify</groupId>
	    <artifactId>zookeeper</artifactId>
	    <version>${project.parent.version}</version>
	  </dependency>
	  <!-- 打包用 -->
	  <dependency>
	  	<groupId>com.meizu.simplify</groupId>
	    <artifactId>boot</artifactId>
	    <version>${project.parent.version}</version>
	  </dependency>
	  <dependency>
	  	<groupId>com.meizu.simplify</groupId>
	    <artifactId>test</artifactId>
	    <version>${project.parent.version}</version>
	    <scope>test</scope>
	  </dependency>
	  <dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-log4j12</artifactId>
		<version>1.7.7</version>
	</dependency>
	<dependency>
		<groupId>log4j</groupId>
		<artifactId>log4j</artifactId>
		<version>1.2.17</version>
	</dependency>
  </dependencies>
  <build>
  	<plugins>
  		  <!--第一种启动方式： 不使用插件的的命令行方式启动服务  [mvn exec:java -Dexec.mainClass="com.meizu.simplify.bootstrap.Server"] -->
  		  <!--第二种启动方式：使用以下 exec-maven-plugin插件，那么只需要输入mvc test就可以启动，插件版定了test生命周期 -->
  		  <!--第三种启动方式：直接直接main类，通过eclipse支持的选项:run as java application,这种方式需要手动指定main类，boot项目打开的情况，不能通过项目赛选，只能通过eclipse在所有项目中选择启动的项目及对应的main类，比较繁琐  -->
  		  <!--第四种启动方式：直接通过命令行执行java命令，或是通过定好的shell等批处理方式来启动，生产环境的分发包使用这个方式来处理  -->
  		  <!--第五种启动方式：通过自定maven插件或是gradle插件来自定义启动命令：好处是使用方便，确定需要开发  -->
		  <plugin>
		   <groupId>org.codehaus.mojo</groupId>
		   <artifactId>exec-maven-plugin</artifactId>
		   <version>1.5.0</version>
		   <executions>
		    <execution>
		     <phase>test</phase>
		     <goals>
		      <goal>java</goal>
		     </goals>
		     <configuration>
		      <mainClass>com.meizu.simplify.bootstrap.Server</mainClass>
		      <!-- <arguments>
		       <argument>name</argument>
		       <argument>path</argument>
		      </arguments> -->
		     </configuration>
		    </execution>
		   </executions>
		  </plugin>
  		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-jar-plugin</artifactId>
			<version>2.6</version>
			<configuration>
				<archive>
						<!-- 运行时的jar包，不需要在META-INF中maven目录中有pom*文件 -->
						<addMavenDescriptor>false</addMavenDescriptor>
						<compress>true</compress>
						<forced>true</forced>
						<!-- 包中考虑添加index.list来描述整个分发包的内容 -->
						<!-- 注意：开启这个选项，会在META-INF添加index.list文件，会导致classpath失效，程序无法正常运行，可运行的程序，依赖META-INF的MANIFEST.MF文件的程序，一定不要开启它 -->
						<index>false</index>
			            <manifest>
			              <addClasspath>true</addClasspath>
			              <addDefaultSpecificationEntries>false</addDefaultSpecificationEntries>
			              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
			              <addExtensions>false</addExtensions>
			              <classpathMavenRepositoryLayout>false</classpathMavenRepositoryLayout>
			              <classpathPrefix></classpathPrefix>
			              <!-- <classpathLayoutType>custom</classpathLayoutType>
			              <customClasspathLayout>path</customClasspathLayout> -->
			              <useUniqueVersions>true</useUniqueVersions>
                          <!-- <mainClass>com.meizu.simplify.config.server.bootstrap.Server</mainClass> -->
                          <mainClass>com.meizu.simplify.bootstrap.Server</mainClass>
			            </manifest>
						<manifestEntries>
							<!-- 增加自定义的classpath -->
							<Class-Path>../conf/</Class-Path>
	               			<!-- <Dependencies>org.javassist, org.apache.velocity</Dependencies> -->
							<artifactId>${project.artifactId}</artifactId>
							<Copyright>meizu 2015</Copyright>
							<!-- <name>${project.name}</name>
							<version>${project.version}</version> 
							<Build-Time>${current.timestamp}</Build-Time>-->
	            		</manifestEntries>
		        		<manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile>
		        		<!-- <pomPropertiesFile>META-INF/maven/${groupId}/${artifactId}/pom.properties</pomPropertiesFile> -->
					</archive>
					<!-- 剥离掉配置信息，会导致加载不到外部配置信息 -->
					<includes>
						<include>**/com/**</include>
					</includes>
				<!-- <skip>true</skip> -->
			</configuration>
		</plugin>
		<plugin>  
            <groupId>org.apache.maven.plugins</groupId>  
            <artifactId>maven-dependency-plugin</artifactId>  
             <version>2.10</version>
            <executions>
            	<!-- 以下异常是因为提前没有打包需要copy的artifactId，找不到要拷贝的artifactId,只要提前对需要拷贝的artifactId执行package，或是install，问题就解决了 -->  
            	<!-- Artifact has not been packaged yet. When used on reactor artifact, copy should be executed after packaging: see MDEP-187 -->
                <execution>  
                    <id>unpack</id>  
                    <phase>package</phase>  
                    <goals>
		               <goal>unpack</goal>
		             </goals>  
		             <configuration>
		               <artifactItems>
		                 <artifactItem>
							<groupId>com.meizu.simplify</groupId>
							<artifactId>boot</artifactId>
							<version>${project.parent.version}</version>
		                    <type>jar</type>
		                   <overWrite>false</overWrite>
		                   <outputDirectory>${project.build.directory}</outputDirectory>
		                   <!-- <destFileName>new.jar</destFileName> -->
		                   <includes>scripts/**</includes>
		                   <!-- <includes>**/*test.class,**/*.xml</includes> -->
		                   <!-- <excludes>**/*.class,**/META-INF/**</excludes> -->
		                 </artifactItem>
		               </artifactItems>
		               <!-- <includes>**/*.java</includes>
		               <excludes>**/*.properties</excludes> -->
                        <!-- <outputDirectory>${project.build.directory}src/main/scripts</outputDirectory> -->  
		               <!-- <overWriteReleases>false</overWriteReleases>
		               <overWriteSnapshots>true</overWriteSnapshots> -->
                    </configuration>  
                </execution>  
            </executions>  
        </plugin>
  		<!-- 是maven中针对打包任务而提供的标准插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<!-- <outputFileNameMapping>@{artifactId}@. @{extension}@. @{version}@</outputFileNameMapping> -->
					<finalName>${project.artifactId}</finalName>
					<!-- <descriptors>
						<descriptor>src/main/assemblies/binary.xml</descriptor>
					</descriptors> -->
			        <!-- <encoding>utf-8</encoding> -->
			        <!-- <appendAssemblyId>false</appendAssemblyId>  --> 
			        <!-- <descriptorRefs>
	                    <descriptorRef>jar-with-dependencies</descriptorRef>  
	                </descriptorRefs>  -->
	                <descriptorRefs>
	                    <descriptorRef>binary</descriptorRef>  
	                </descriptorRefs> 
				</configuration>
				<executions>
					<!--执行器 mvn assembly:single-->
					<!--执行器 mvn assembly:attached-->
					<!-- 生成bin安装程序 -->
		            <execution>
			            <id>bin</id>
			            <phase>package</phase><!-- 绑定到package生命周期阶段上 -->
			            <goals>
			            	<!-- <goal>single</goal> --><!-- 只运行一次  --> 
			              <goal>attached</goal>
			            </goals>
			            <configuration>
			              <descriptorRefs>
			                    <descriptorRef>binary</descriptorRef>  
			              </descriptorRefs>
			              <!-- <archiverConfig>
						        <encoding>utf-8</encoding>
						    </archiverConfig> -->
			              <tarLongFileMode>gnu</tarLongFileMode>
			            </configuration>
		          	</execution>
		          	<!-- 生成源码包 -->
		          	<execution>
			            <id>src</id>
			            <phase>package</phase><!-- 绑定到package生命周期阶段上 -->
			            <goals>
			            	<!-- <goal>single</goal> --><!-- 只运行一次  --> 
			              <goal>attached</goal>
			            </goals>
			            <configuration>
			              <!-- <descriptors>
		                	<descriptor>src/main/assemblies/source.xml</descriptor>
		              	  </descriptors> -->
		              	  <descriptorRefs>
			                    <descriptorRef>source</descriptorRef>  
			              </descriptorRefs> 
			              <!-- <archiverConfig>
						        <encoding>utf-8</encoding>
						    </archiverConfig> -->
			              <tarLongFileMode>gnu</tarLongFileMode>
			            </configuration>
		          	</execution>
				</executions>
			  	<dependencies>
				  	<dependency>
			            <groupId>com.meizu.simplify</groupId>
			            <artifactId>assembly-descriptor</artifactId>
			            <version>${project.parent.version}</version>
			          </dependency>
			          <dependency>
			              <groupId>org.codehaus.plexus</groupId>
			              <artifactId>plexus-archiver</artifactId>
			              <version>2.4.4</version>
			              <exclusions>
			                  <exclusion>
			                      <groupId>org.codehaus.plexus</groupId>
			                      <artifactId>plexus-component-api</artifactId>
			                  </exclusion>
			              </exclusions>
			          </dependency>
			     </dependencies>
			</plugin>
  	</plugins>
  </build>
</project>