buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
allprojects  {
	apply plugin: 'eclipse'//提供eclipse支持，init的时候会创建eclipse相关的配置信息，可以用于导入eclipse ide工具中
	apply plugin: 'maven' //提供maven支持，可以兼容maven的配置
	//apply plugin: 'com.jfrog.bintray' //支持上传到jcenter上面，要提前注册帐号

	group = 'com.meizu'
	version = '$simplify-framework-version'
	tasks.withType(JavaCompile) {
	   options.encoding = 'UTF-8'
	}
  
	//可以上传到maven私服，避免流失maven用户，兼容性很好,由 apply plugin: 'maven' 来提供基础支持,会反向生成pom文件
	uploadArchives {
	    repositories.mavenDeployer {
	        repository(url: "http://10.2.67.20:8081/nexus/content/repositories/snapshots/") {
	            authentication(userName: "admin", password: "admin123")
	            pom.groupId = "com.meizu"
	            pom.artifactId = "simplify-framework"
	        }
	        pom.project {
	            licenses {
	                license {
	                    name 'The Apache Software License, Version 2.0'
	                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	                    distribution 'repo'
	                }
	            }
	        }
	    }
	}
    /*def siteUrl = 'http://10.2.67.40/ros-team/simplify-framework' // 项目的主页
	def gitUrl = 'http://10.2.67.40/simplify-framework.git' // Git仓库的url
	install {
	    repositories.mavenInstaller {
	    	pom.version = '1.1.3.0'
	        pom.artifactId = 'simplify-framework'
	        // This generates POM.xml with proper parameters
	        pom {
		        project {
			        packaging 'jar'
			        name 'desc' //项目描述
			        url siteUrl
			        licenses {
			            license {
			            name 'The Apache Software License, Version 2.0'
			            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
			            }
			        }
			        developers {
				        developer {
				        id 'ros-team'    //填写的一些基本信息
				        name 'simplify-framework'
				        email 'luchuangye@meizu.com'
				        }
			        }
			        scm {
				        connection gitUrl
				        developerConnection gitUrl
				        url siteUrl
			        }
		        }
	        }
	    }
	}*/
	/*
	Properties properties = new Properties()
	properties.load(project.rootProject.file('local.properties').newDataInputStream())
	bintray {
	    user = properties.getProperty("bintray.user")
	    key = properties.getProperty("bintray.apikey")
	    configurations = ['archives']
	    pkg {
	        repo = "maven"    
	        name = "BounceProgressBar"    //发布到JCenter上的项目名字
	        websiteUrl = siteUrl
	        vcsUrl = gitUrl
	        licenses = ["Apache-2.0"]
	        publish = true
	    }
	}*/
}

subprojects {
	apply plugin: 'java'
	//apply plugin: 'checkstyle'//帮助JAVA开发人员遵守某些编码规范的工具。它能够自动化代码规范检查过程，从而使得开发人员从这项重要却枯燥的任务中解脱出来
	apply plugin: 'findbugs'//静态分析工具，它检查类或者 JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题
	apply plugin: 'jdepend'//在开发Java项目时经常会遇到关于包混乱的问题， JDepend工具可以帮助你在开发过程中随时跟踪每个包的依赖性（引用/被引用）,，从而设计高维护性的架构，不论是在打包发布还是版本升级都会更加轻松
	apply plugin: 'pmd'//和checkstyle类似，是否考虑放弃一个

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

  /*checkstyle{
	  configFile = file('config/checkstyle/checkstyle-main.xml')
  }*/
  repositories {
    //以下三个仓库(maven开头的)的配置 不需要由 apply plugin: 'maven' 来提供基础支持
    mavenLocal()
    jcenter()//gradle 自己的仓库支持,比maven仓库的库更全，支持ivy的库
    maven { url "http://10.2.67.20:8081/nexus/content/groups/public" } 
    maven { url "http://repo.maven.apache.org/maven2" }
  }
  
  dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7', 'ch.qos.logback:logback-classic:1.1.3'
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12' 
  }
	//https://docs.gradle.org/current/userguide/publishing_maven.html
	//https://docs.gradle.org/2.14/userguide/userguide.html  gradle官方文档
	//https://docs.gradle.org/2.14/dsl/  gradle domain specil lang 领域特定语言 api文档
	//https://plugins.gradle.org   gradle 的 第三方插件的仓库，所以第三方插件如果愿意，可以托管到这个官方仓库
	//https://bintray.com/bintray/jcenter  基于ivy和maven的gradle官方指定仓库，不包含插件
}
